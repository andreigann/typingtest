Motivation
Introduction
As the requirements to Javascript single-page applications get more sophisticated, more state needs to be managed by the JavaScript code than even before. This state may include server responses, cached data, and data created locally, but not yet persisted to the server. It also includes the UI state, such as the active route, the selected tab, whether to show a spinner or pagination controls, and so on.
Managing ever-changing state is hard. If a model can update another model, the a view can update a model that updates another model, and this, in turn, might cause another view to update. At some point you no longer know what happens in your app. You no longer control when, why, and how the state is updated. When the system is opaque and non-deterministic, it's hard to reporduce bugs or add new features.
As if this wasn't bad enough, consider the new requirements becoming common in front-end product development, such as handling optimistic updates, rendering on the server, fetching data before performing route ourserlves surrounded by complexity we never had to deal before, but is it time to give up?
A lot of complexity comes from the fact that we're mixing two concepts that are very hard for the human mind to reason about: mutation and asynchronicity. I call them Mentos and Coke. Both can be great in separation, but together, they are a mess. Libraries like React attempt to solve this problem in the view layer by removing asynchrony and direct DOM manipulation. However, React leaves managinng the state of your data up to you.
Following the steps of Flux, CQRS, and Event Sourcing, Redux attempts to make state mutations predictable by imposing certain restrictions on how and when updates can happen. These restrictions are reflected in the three principles of Redux.
Three Principles
Redux can be described in three fundamentals principles:
Single source of truth
The state of your whole application is stored in an objest tree inside a single store.
This makes it easy to  create universal apps. The state from the server can be serialized and hydrated into the clint with no extra coding effort. It is easier to debug an application where there is a state tree. You can also persist your app's state in development for a faster development cycle. And with a single state tree, you get previously difficult functionality like Undo/Redo for free.

console.log(store.getState());
{
	visibilityFilter: 'SHOW_ALL',
	todos: [{
		text: 'Consider using Redux',
		completed: true,
	}, {
		text: 'Keep all state in a single tree',
		completed: false
	}]
}

State is read-only
The only way to mutate the state is to emit an action, an object describing what happened.
This ensures that the views or the network callbacks never write directly to the state, and instead express the intent to mutate. Because all mutations are centralized and happen one by one in a strict order, there are no subtle race conditions to watch out for. Actions are just plain objects, so they can be logged, serialized, stored, and later replayed for debugging or testing purposes.

store.dispatch({
		type: 'COMPLETED_TODO',
		index: 1
});

store.dispatch({
	type:'SET_VISIBILITY_FILTER',
	filter: 'SHOW_COMPLETED'
});

Mutations are written as pure functions
To specify how the state tree is transformed by actions, you write pure reducers.
Reducers are just pure functions that take the previous state and action, and return the next state. Remember to return new state objects, instead of mutation the previous state.


Basics
Don't be fooled by all the fancy talk about reducers, middleware, store enhancers -- Redux is incredibly simple. If you've ever build a Flux application, you will feel right at home. (If you're new to Flux it's easy too!)
In this guide, we'll walk through the process of creating a simple ToDo app.
Actions
Reducers
Store
Data Flow
Usage with React
Example: Todo List

Actions
First, let's define some actions.
Actions are payloads of information that send data from your application to your store. They are the only source of information for the store. You send them to the store using store.dispath().
Here's an example action which represents adding a new todo item:
const ADD_TODO = 'ADD_TODO';
{
	type: ADD_TODO,
	text: 'Build my first Redux app'
}
Actions are plain JavaScript objects. Actions must have a type property that indicates the type of action being performed. Types should typically be defined as string constants. Once your app is large enough, you want to move them into a separate module.

import { ADD_TODO, REMOVE_TODO } from '../actionTypes';

Note on Boilerplate
You don't have to define action type constants in a separate file, or even to define them at all. For a small project, it might be easier to just use string literals for action types. However, there are some benefits to explicitly declaring constants in larger codebases. Read Reducing Boilerplate for more practical tips on keeping your codebase clean.

Other that type, the structure of an action object is really up to you. If you're interested, check out Flux Standard Action for recommendations on how actions could be constructed.
We'll add one more action type to describe a user ticking off a todo as completed. We refer to a particular todo by index because we store them in an array. In real app it is wiser to generate a unique ID every time someting new is created.

{
	type: COMPLETE_TODO.
	index: 5
}
It's a good idea to pass as little data in each action as possible. For example, it's better to pass index than the whole todo object.
Finally, we'll add one more action type for changing the currently visible todos.
{
	type: SET_VISIBILITY_FILTER,
	filter: SHOW_COMPLETED
}

Actions Creators
Action creators are exactly that -- functions that create actions. It's easy to conflate the terms "action" and "action creators", so do your best to use the proper term.
In traditional Flux implementations, action creators often trigger a dispatch when invoked, like so:
function addTodoWithDispatch(text) {
	const action = {
		type: ADD_TODO,
		text
	};
	dispatch(action);
}

By contrast, in Redux action creators are pure functions with zero side-effects. They simply return an action:
function addTodo(text) {
	return {
		type: ADD_TODO,
		text
	};
}
This makes them more portable and easier to test. To actually initiate a dispatch, pass the result to the dispatch() function:
dispatch(addTodo(text));
dispatch(completeTodo(index));


Or create a bound action creator that automatically dispatches:
const boundAddTodo = (text) => dispatch(addTodo(text));
const boundCompleteTodo = (index) => dispatch(completeTodo(index));

You'll be able to call them directly:
boundAddTodo(text);
boundCompleteTodo(index);

The dispatch() function can be accesesd directly from the store as store.dispatch(), but more likely you'll access it using a helper like react-redux's connect(). You can use bindActionCreators() to automatically bind many action creators to a dispatch() function.

Source code

action.js
/*
 * action types
 */
export const ADD_TODO = 'ADD_TODO';
export const COMPLETE_TODO = 'COMPLETE_TODO';
export const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'

/*
 * other constants
 */

export const VisibilityFilters = {
	SHOW_ALL: 'SHOW_ALL',
	SHOW_COMPLETED: 'SHOW_COMPLETED',
	SHOW_ACTIVE: 'SHOw_ACTIVE'	
};

/*
 * action creators
 */

export function addTodo(text) {
	return { type: ADD_TODO, text };
}

export function completeTodo(index) {
	return { type: COMPLETE_TODO, index };
}

export function setVisibilityFilter(filter) {
	return { type: SET_VISIBILITY_FILTER, filter };
}

Next Steps
Now let's define some reducers to specify how the state updates when you dispatch these actions!

Note for Advanced Users
If you're already familiar with the basics concepts and have previously completed this tutorial, don't forget to check out async actions in the advanced tutorial to learn how to handle AJAX responses and compose action creators into async control flow.