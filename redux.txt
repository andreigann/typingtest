Motivation
Introduction
As the requirements to Javascript single-page applications get more sophisticated, more state needs to be managed by the JavaScript code than even before. This state may include server responses, cached data, and data created locally, but not yet persisted to the server. It also includes the UI state, such as the active route, the selected tab, whether to show a spinner or pagination controls, and so on.
Managing ever-changing state is hard. If a model can update another model, the a view can update a model that updates another model, and this, in turn, might cause another view to update. At some point you no longer know what happens in your app. You no longer control when, why, and how the state is updated. When the system is opaque and non-deterministic, it's hard to reporduce bugs or add new features.
As if this wasn't bad enough, consider the new requirements becoming common in front-end product development, such as handling optimistic updates, rendering on the server, fetching data before performing route ourserlves surrounded by complexity we never had to deal before, but is it time to give up?
A lot of complexity comes from the fact that we're mixing two concepts that are very hard for the human mind to reason about: mutation and asynchronicity. I call them Mentos and Coke. Both can be great in separation, but together, they are a mess. Libraries like React attempt to solve this problem in the view layer by removing asynchrony and direct DOM manipulation. However, React leaves managinng the state of your data up to you.
Following the steps of Flux, CQRS, and Event Sourcing, Redux attempts to make state mutations predictable by imposing certain restrictions on how and when updates can happen. These restrictions are reflected in the three principles of Redux.
Three Principles
Redux can be described in three fundamentals principles:
Single source of truth
The state of your whole application is stored in an objest tree inside a single store.
This makes it easy to  create universal apps. The state from the server can be serialized and hydrated into the clint with no extra coding effort. It is easier to debug an application where there is a state tree. You can also persist your app's state in development for a faster development cycle. And with a single state tree, you get previously difficult functionality like Undo/Redo for free.

console.log(store.getState());
{
	visibilityFilter: 'SHOW_ALL',
	todos: [{
		text: 'Consider using Redux',
		completed: true,
	}, {
		text: 'Keep all state in a single tree',
		completed: false
	}]
}

State is read-only
The only way to mutate the state is to emit an action, an object describing what happened.
This ensures that the views or the network callbacks never write directly to the state, and instead express the intent to mutate. Because all mutations are centralized and happen one by one in a strict order, there are no subtle race conditions to watch out for. Actions are just plain objects, so they can be logged, serialized, stored, and later replayed for debugging or testing purposes.

store.dispatch({
		type: 'COMPLETED_TODO',
		index: 1
});

store.dispatch({
	type:'SET_VISIBILITY_FILTER',
	filter: 'SHOW_COMPLETED'
});

Mutations are written as pure functions
To specify how the state tree is transformed by actions, you write pure reducers.
Reducers are just pure functions that take the previous state and action, and return the next state. Remember to return new state objects, instead of mutation the previous state.